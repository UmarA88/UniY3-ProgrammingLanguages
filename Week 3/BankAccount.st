Object subclass: #Account	instanceVariableNames: 'balance interestRate'	classVariableNames: ''	poolDictionaries: ''	category: 'BankAccount'!!Account methodsFor: 'operators' stamp: 'ElliotLewis 10/10/2018 22:26'!predictBalanceAfterYears: years	^ balance * ((1 + interestRate) raisedTo: years).! !!Account methodsFor: 'operators' stamp: 'ElliotLewis 10/10/2018 22:34'!yearsUntilAmount: amount	| b i |	b := balance.	i := 0.	[b < amount] whileTrue: [		i := i + 1.		b := b * (interestRate + 1).	].	^ i! !!Account methodsFor: 'operators' stamp: 'ElliotLewis 10/10/2018 22:19'!credit: amount	balance := balance + amount! !!Account methodsFor: 'initialization' stamp: 'ElliotLewis 10/10/2018 22:17'!initialize	balance := 0.	interestRate := 0.! !!Account methodsFor: 'accessing' stamp: 'ElliotLewis 10/10/2018 22:18'!interestRate	^ interestRate! !!Account methodsFor: 'accessing' stamp: 'ElliotLewis 10/10/2018 22:17'!balance	^ balance! !Account subclass: #CurrentAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BankAccount'!!CurrentAccount methodsFor: 'initialization' stamp: 'ElliotLewis 10/10/2018 22:21'!initialize	super initialize.	balance := 0.	interestRate := 0.005.! !!CurrentAccount methodsFor: 'operators' stamp: 'ElliotLewis 10/10/2018 22:24'!debit: amount	(balance - amount >= 0) ifTrue: [		balance := balance - amount.	] ifFalse: [		Exception signal: 'Account does not have enough funds to complete this transaction.'.	]! !Account subclass: #SavingsAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BankAccount'!!SavingsAccount methodsFor: 'initialization' stamp: 'ElliotLewis 10/10/2018 22:21'!initialize	super initialize.	balance := 0.	interestRate := 0.015.! !